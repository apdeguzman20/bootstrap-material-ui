//
// Forms
// --------------------------------------------------

// Mixins
.md-form-control-focus(@color: @input-border-focus) {
  @color-rgba: rgba(red(@color), green(@color), blue(@color), .6);
  &:focus {
    border-color: @color;
    outline: 0;
    .box-shadow(~"0 1px 0 @{color-rgba}");
  }
}

.md-form-control-validation(@text-color: #555; @border-color: #ccc; @background-color: #f5f5f5) {
  // Set the border and box shadow on specific inputs to match
  .form-control {
    border-color: @border-color;
    .box-shadow(none);
    &:focus {
      border-color: @border-color;
      .box-shadow(0 1px 0 @border-color);
    }
  }
  // Set validation states also for addons
  .input-group-addon {
    color: @text-color;
    border-color: @border-color;
    background-color: @background-color;
  }
  // Optional feedback icon
  .form-control-feedback {
    color: @text-color;
  }
}





//
// Forms
// --------------------------------------------------


// Normalize non-controls
//
// Restyle and baseline non-control form elements.

fieldset {
}

legend {

}

label {
  font-size: 12px;
  font-weight: 400;
  line-height: 16px;
  margin-bottom: 0;
}

label + .form-control,
.control-label + .form-control {
  margin-top: 0;
}

label.sr-only + .form-control,
.control-label.sr-only + .form-control {
  margin-top: 8px;
}

// Normalize form controls
//
// While most of our form styles require extra classes, some basic normalization
// is required to ensure optimum display with or without those classes to better
// address browser inconsistencies.

// Override content-box in Normalize (* isn't specific enough)
input[type="search"] {
}

// Position radios and checkboxes better
input[type="radio"],
input[type="checkbox"] {

}

// Set the height of file controls to match text inputs
input[type="file"] {
}

// Make range inputs behave like textual form controls
input[type="range"] {

}

// Make multiple select elements height not fixed
select[multiple],
select[size] {
}

// Focus for file, radio, and checkbox
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
}

// Adjust output element
output {

}


// Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls:
//
// select
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]

.form-control {
  border-width: 0 0 1px 0;
  border-radius: 0 !important;
  font-size: 16px;
  margin: 8px 0;
  padding: 0 !important;
  
  .box-shadow(none);
  .md-form-control-focus();
  
  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &[readonly],
  fieldset[disabled] & {

  }

  // Reset height for `textarea`s
  textarea& {
  }
}


// Search inputs in iOS
//
// This overrides the extra rounded corners on search inputs in iOS so that our
// `.form-control` class can properly style them. Note that this cannot simply
// be added to `.form-control` as it's not specific enough. For details, see
// https://github.com/twbs/bootstrap/issues/11586.

input[type="search"] {
}


// Special styles for iOS temporal inputs
//
// In Mobile Safari, setting `display: block` on temporal inputs causes the
// text within the input to become vertically misaligned. As a workaround, we
// set a pixel line-height that matches the given height of the input, but only
// for Safari.

@media screen and (-webkit-min-device-pixel-ratio: 0) {
  input[type="date"],
  input[type="time"],
  input[type="datetime-local"],
  input[type="month"] {
  }
  input[type="date"].input-sm,
  input[type="time"].input-sm,
  input[type="datetime-local"].input-sm,
  input[type="month"].input-sm {
  }
  input[type="date"].input-lg,
  input[type="time"].input-lg,
  input[type="datetime-local"].input-lg,
  input[type="month"].input-lg {
  }
}


// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
  min-height: 48px;
  margin-bottom: 0;
  .clearfix;
  
  & label,
  & .control-label {
    color: @color-secondary-text;
    margin-top: 16px;
  }
  & .btn {
    margin-bottom: 6px;
    margin-top: 6px;
  }
}


// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.radio,
.checkbox {
  margin: 0;
  line-height: 32px;
  min-height: 48px;
  padding-bottom: 8px;
  padding-top: 8px;
  
  label {
    line-height: 20px;
    margin: 0;
  }
}
.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {

}

.radio + .radio,
.checkbox + .checkbox {
}

// Radios and checkboxes on same line
.radio-inline,
.checkbox-inline {

}
.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {

}

// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
//
// Note: Neither radios nor checkboxes can be readonly.
input[type="radio"],
input[type="checkbox"] {
  &[disabled],
  &.disabled,
  fieldset[disabled] & {
  }
}
// These classes are used directly on <label>s
.radio-inline,
.checkbox-inline {
  &.disabled,
  fieldset[disabled] & {
  }
}
// These classes are used on elements with <label> descendants
.radio,
.checkbox {
  &.disabled,
  fieldset[disabled] & {
    label {
    }
  }
}


// Static form control text
//
// Apply class to a `p` element to make any string of text align with labels in
// a horizontal form layout.

.form-control-static {
  padding-bottom: 14px;
  padding-top: 14px;

  &.input-lg,
  &.input-sm {

  }
}


// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.

.input-sm,
.form-group-sm .form-control {
  font-size: 12px;
}

.input-lg,
.form-group-lg .form-control {
  font-size: 34px;
}


// Form control feedback states
//
// Apply contextual and semantic states to individual form controls.

.has-feedback {
  padding-bottom: 16px;

  // Ensure icons don't overlap text
  .form-control {
    padding-right: 0;
  }
}
// Feedback icon (requires .glyphicon classes)
.form-control-feedback {

}
.input-lg + .form-control-feedback {

}
.input-sm + .form-control-feedback {

}

// Feedback states
.has-success {
  .md-form-control-validation(@brand-success; @brand-success; @state-success-bg);
}
.has-warning {
  .md-form-control-validation(@brand-warning; @brand-warning; @state-warning-bg);
}
.has-error {
  .md-form-control-validation(@brand-danger; @brand-danger; @state-danger-bg);
}

// Reposition feedback icon if input has visible label above
.has-feedback label {

  & ~ .form-control-feedback {
    font-size: 12px;
    height: 16px;
    line-height: 16px;
    margin-top: -16px;
    top: 100% !important;
    width: auto;
  }
  &.sr-only ~ .form-control-feedback {
  }
}


// Help text
//
// Apply to any element you wish to create light text for placement immediately
// below a form control. Use for general help, formatting, or instructional text.

.help-block {
  color: @color-hint-text;
  font-size: 12px;
  line-height: 16px;
  margin: 0;
}


// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).
//
// Heads up! This is mixin-ed into `.navbar-form` in navbars.less.

.form-inline {

  // Kick in the inline
  @media (min-width: @screen-sm-min) {
    
    > * + * {
      margin-left: 8px;
    }
    
    // Inline-block all the things for "inline"
    .form-group {

    }

    // In navbar-form, allow folks to *not* use `.form-group`
    .form-control {
      margin-top: 8px;
    }

    // Make static controls behave like regular ones
    .form-control-static {
    }

    .input-group {

      .input-group-addon,
      .input-group-btn,
      .form-control {
      }
    }

    // Input groups need that 100% width though
    .input-group > .form-control {
    }

    .control-label {
      margin-bottom: 16px;
    }

    // Remove default margin on radios/checkboxes that were used for stacking, and
    // then undo the floating of radios and checkboxes to match (which also avoids
    // a bug in WebKit: https://github.com/twbs/bootstrap/issues/1969).
    .radio,
    .checkbox {

      label {
      }
    }
    .radio input[type="radio"],
    .checkbox input[type="checkbox"] {

    }

    // Re-override the feedback icon.
    .has-feedback .form-control-feedback {
    }
  }
}


// Horizontal forms
//
// Horizontal forms are built on grid classes and allow you to create forms with
// labels on the left and inputs on the right.

.form-horizontal {

  // Consistent vertical alignment of radios and checkboxes
  //
  // Labels also get some reset styles, but that is scoped to a media query below.
  .radio,
  .checkbox,
  .radio-inline,
  .checkbox-inline {

  }
  // Account for padding we're adding to ensure the alignment and of help text
  // and other content below items
  .radio,
  .checkbox {
  }

  // Make form groups behave like rows
  .form-group {
  }

  // Reset spacing and right align labels, but scope to media queries so that
  // labels on narrow viewports stack the same as a default form example.
  @media (min-width: @screen-sm-min) {
    .control-label {
      text-align: left;
      padding-top: 0 !important;
    }
  }

  // Validation states
  //
  // Reposition the icon because it's now within a grid column and columns have
  // `position: relative;` on them. Also accounts for the grid gutter padding.
  .has-feedback .form-control-feedback {
  }

  // Form group sizes
  //
  // Quick utility class for applying `.input-lg` and `.input-sm` styles to the
  // inputs and labels within a `.form-group`.
  .form-group-lg {
    @media (min-width: @screen-sm-min) {
      .control-label {
      }
    }
  }
  .form-group-sm {
    @media (min-width: @screen-sm-min) {
      .control-label {
      }
    }
  }
}
